(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{172:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),a("p",[t._v("通过求二叉树的最大深度这道题来感受遍历法和分治法的区别，题目：https://www.lintcode.com/problem/maximum-depth-of-binary-tree/")]),t._v(" "),a("p",[t._v("遍历法：")]),t._v(" "),t._m(3),a("p",[t._v("分治法：")]),t._v(" "),t._m(4),a("p",[t._v("遍历法与分治法是两种常见的递归方法，他们的联系与区别有：")]),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),a("p",[t._v("更多 AVL 树的内容见："),a("router-link",{attrs:{to:"./binarytree/binarytree-1.html"}},[t._v("Binary Tree 笔记")])],1),t._v(" "),a("p",[t._v("BST 指的是一棵树是空树，或者满足以下特性：")]),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),a("p",[t._v("BST 引申而出的高级树：")]),t._v(" "),a("ul",[a("li",[t._v("用于数据库或各语言标准库中索引的"),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91",target:"_blank",rel:"noopener noreferrer"}},[t._v("红黑树"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("提升二叉树性能底线的"),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E4%BC%B8%E5%B1%95%E6%A0%91",target:"_blank",rel:"noopener noreferrer"}},[t._v("伸展树"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("优化红黑树的 "),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/AA%E6%A0%91",target:"_blank",rel:"noopener noreferrer"}},[t._v("AA 树"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("随机插入的"),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E6%A0%91%E5%A0%86",target:"_blank",rel:"noopener noreferrer"}},[t._v("树堆"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("机器学习 kNN 算法的高维快速搜索 "),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/K-d%E6%A0%91",target:"_blank",rel:"noopener noreferrer"}},[t._v("k-d 树"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("更多 BST 的内容见："),a("router-link",{attrs:{to:"./binarytree/binarytree-1.html"}},[t._v("Binary Tree 笔记")])],1)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"深度优先搜索算法（dfs）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#深度优先搜索算法（dfs）","aria-hidden":"true"}},[this._v("#")]),this._v(" 深度优先搜索算法（DFS）")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"基于二叉树的-dfs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基于二叉树的-dfs","aria-hidden":"true"}},[this._v("#")]),this._v(" 基于二叉树的 DFS")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"遍历法-vs-分治法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#遍历法-vs-分治法","aria-hidden":"true"}},[this._v("#")]),this._v(" 遍历法 VS 分治法")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("maxDepth")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TreeNode root"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    depth "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("traversal")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" depth"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("traversal")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TreeNode node"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" currDepth"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" null"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  depth "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("max")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("depth"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" currDepth"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{attrs:{class:"token function"}},[t._v("traversal")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" currDepth "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("traversal")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" currDepth "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("maxDepth")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TreeNode root"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" null"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" left "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("maxDepth")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" right "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("maxDepth")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Math"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("max")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" right"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("遍历法是通过前中后序遍历，游走于整棵树，通过一个全局变量或者传入参数来记录这个过程中遇到的点或者需要计算的结果。")]),this._v(" "),s("li",[this._v("分治法先让左右子树去解决同样的问题，得到结果之后，再整合为整棵树的结果。")]),this._v(" "),s("li",[this._v("从程序实现的角度，遍历法通常没有返回值，分治法有返回值。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"avl-vs-bst"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#avl-vs-bst","aria-hidden":"true"}},[this._v("#")]),this._v(" AVL VS BST")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("AVL 树指的是一颗平衡二叉树，即左右子树的高度差绝对值不超过 1 且左右子树都是平衡二叉树，一颗空树也是平衡二叉树。AVL 树的高度是 "),s("code",[this._v("O(logN)")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("若二叉搜索树是 AVL 树，则最大的作用是保证查找的最坏时间复杂度为 "),s("code",[this._v("O(logN)")]),this._v("，而且较浅的树对插入和删除操作也更快。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("若左子树不为空，那么左子树上的所有节点值都小于等于根节点值。")]),this._v(" "),s("li",[this._v("若右子树不为空，那么右子树上的所有节点值都大于等于根节点值。")]),this._v(" "),s("li",[this._v("左右子树也都是二叉搜索树。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("按照中序遍历可以得到升序的节点列表。在 BST 中查找某个值的平均复杂度是 "),s("code",[this._v("O(logN)")]),this._v("，类似于二分查找，每次通过判断目标值和根节点值的大小关系，可以排除一半的节点。")])}],!1,null,null,null);e.options.__file="dfs.md";s.default=e.exports}}]);